# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'version_2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
import plotly.express as px
import numpy as np
from plotly.graph_objects import Scatter, Figure, Layout
import plotly
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QMainWindow
import geopandas as gpd
import plotly.graph_objs as go
import plotly.express as px
from urllib.request import urlopen
import json
from PyQt5.QtCore import QSize, Qt
from dialog_parser_area import *
from dialog_export import *
from dialog_filter import *
from dialog_vizualizator import *
from Output_db import Output_db
from DataGrabber import DataGrabber

class Ui_MainWindow(object):

    def track_ship(self, where):
        gdf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
        # with open('states_india_1.json') as response:
        #    india = json.load(response)
        print(gdf.head())

        # with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
        #    counties = json.load(response)

        fig = go.Figure(go.Choroplethmapbox(locations=gdf['continent'],
                                            featureidkey="properties.st_nm",
                                            colorscale="Viridis",
                                            zmin=0,
                                            zmax=25,
                                            marker_opacity=0.5,
                                            marker_line_width=1
                                            ))

        result = Output_db.output_visualizer(where, 1)

        lati = []
        longi = []
        text_ship = []
        #for res in result:
        #    lati.append(str(res['latitude']))
        #    longi.append(str(res['longitude']))
        #    text_ship.append(str(res['name'] + ' ' + str(res['type'])))
        for i in range(0, len(result)):
            lati.append(str(result[i]['latitude']))
            longi.append(str(result[i]['longitude']))
            text_ship.append(str(result[i]['name'] + ' ' + str(result[i]['type'])))
        # print(lati)
        # print(longi)
        # print(text_ship)

        fig.add_trace(
            go.Scattermapbox(
                lat=lati,
                lon=longi,
                mode='markers',
                marker=go.scattermapbox.Marker(
                    size=9
                ),
                text=text_ship,
            )
        )

        fig.update_layout(
            mapbox_style="carto-positron",
            mapbox_zoom=9, mapbox_center={"lat": 42.82503, "lon": 131.9687}
        )

        html = '<html><body>'
        html += plotly.offline.plot(fig, output_type='div', include_plotlyjs='cdn')
        html += '</body></html>'
        self.plot_widget.setHtml(html)

    def real_time(self, where):
        gdf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
        # with open('states_india_1.json') as response:
        #    india = json.load(response)
        print(gdf.head())

        # with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
        #    counties = json.load(response)

        fig = go.Figure(go.Choroplethmapbox(locations=gdf['continent'],
                                            featureidkey="properties.st_nm",
                                            colorscale="Viridis",
                                            zmin=0,
                                            zmax=25,
                                            marker_opacity=0.5,
                                            marker_line_width=1
                                            ))

        result = Output_db.output_visualizer(where, 2)

        lati = []
        longi = []
        text_ship = []
        #for res in result:
        #    lati.append(str(res['latitude']))
        #    longi.append(str(res['longitude']))
        #    text_ship.append(str(res['name'] + ' ' + str(res['type'])))
        for i in range(0, len(result)):
            lati.append(str(result[i]['latitude']))
            longi.append(str(result[i]['longitude']))
            text_ship.append(str(result[i]['name'] + ' ' + str(result[i]['type'])))
        # print(lati)
        # print(longi)
        # print(text_ship)

        fig.add_trace(
            go.Scattermapbox(
                lat=lati,
                lon=longi,
                mode='markers',
                marker=go.scattermapbox.Marker(
                    size=9
                ),
                text=text_ship,
            )
        )

        fig.update_layout(
            mapbox_style="carto-positron",
            mapbox_zoom=9, mapbox_center={"lat": 42.82503, "lon": 131.9687}
        )

        html = '<html><body>'
        html += plotly.offline.plot(fig, output_type='div', include_plotlyjs='cdn')
        html += '</body></html>'
        self.plot_widget.setHtml(html)

    def animation_ship(self, where):
        gdf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
        # with open('states_india_1.json') as response:
        #    india = json.load(response)
        print(gdf.head())

        # with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
        #    counties = json.load(response)

        fig = go.Figure(go.Choroplethmapbox(locations=gdf['continent'],
                                            featureidkey="properties.st_nm",
                                            colorscale="Viridis",
                                            zmin=0,
                                            zmax=25,
                                            marker_opacity=0.5,
                                            marker_line_width=1
                                            ))

        #result = Output_db.output_visualizer(where, 1)# AND t2.name = 'HOLLY PIONEER'
        holly = Output_db.output_visualizer("AND t2.name = 'HOLLY PIONEER'", 1)
        astoria = Output_db.output_visualizer("AND t2.name = 'VESTA'", 1)
        mb = Output_db.output_visualizer("AND t2.name = 'CHAVA'", 1)


        lati = {
            'holly': [],
            'astoria': [],
            'mb': []
        }
        longi = {
            'holly': [],
            'astoria': [],
            'mb': []
        }
        text_ship = {
            'holly': [],
            'astoria': [],
            'mb': []
        }
        razm_holly = len(holly)
        razm_astoria = len(astoria)
        razm_mb = len(mb)

        for i in range(0, razm_holly):
            lati['holly'].append(str(holly[i]['latitude']))
            longi['holly'].append(str(holly[i]['longitude']))
            text_ship['holly'].append(str(holly[i]['name'] + ' ' + str(holly[i]['type'])))

            if i < razm_astoria:
                lati['astoria'].append(str(astoria[i]['latitude']))
                longi['astoria'].append(str(astoria[i]['longitude']))
                text_ship['astoria'].append(str(astoria[i]['name'] + ' ' + str(astoria[i]['type'])))
            else:
                lati['astoria'].append(str(astoria[razm_astoria-1]['latitude']))
                longi['astoria'].append(str(astoria[razm_astoria-1]['longitude']))
                text_ship['astoria'].append(str(astoria[razm_astoria-1]['name'] + ' ' + str(astoria[razm_astoria-1]['type'])))
            if i < razm_mb:
                lati['mb'].append(str(mb[i]['latitude']))
                longi['mb'].append(str(mb[i]['longitude']))
                text_ship['mb'].append(str(mb[i]['name'] + ' ' + str(mb[i]['type'])))
            else:
                lati['mb'].append(str(mb[razm_mb-1]['latitude']))
                longi['mb'].append(str(mb[razm_mb-1]['longitude']))
                text_ship['mb'].append(str(mb[razm_mb-1]['name'] + ' ' + str(mb[razm_mb-1]['type'])))
        # for res in result:
        #    lati.append(str(res['latitude']))
        #    longi.append(str(res['longitude']))
        #    text_ship.append(str(res['name'] + ' ' + str(res['type'])))

        #for i in range(0, len(result)):
        #    lati.append(str(result[i]['latitude']))
        #    longi.append(str(result[i]['longitude']))
        #    text_ship.append(str(result[i]['name'] + ' ' + str(result[i]['type'])))
        # print(lati)
        # print(longi)
        # print(text_ship)

        # fig.add_trace(
        #    go.Scattermapbox(
        #        lat=lati1,
        #        lon=longi1,
        #        mode='markers',
        #        marker=go.scattermapbox.Marker(
        #            size=9
        #        ),
        #        text=text_ship1,
        #    )
        # )

        frames = []
        for i in range(0, len(lati['holly'])):
            frames.append(go.Frame(data=[
                go.Scattermapbox(
                    lat=[lati['holly'][i], lati['astoria'][i], lati['mb'][i]],
                    lon=[longi['holly'][i], longi['astoria'][i], longi['mb'][i]],
                    mode='markers',
                    marker=go.scattermapbox.Marker(
                        size=9
                    ),
                    text=[text_ship['holly'][i], text_ship['astoria'][i], text_ship['mb'][i]],
                )
            ]))
        fig.frames = frames
        fig.update_layout(
            mapbox_style="carto-positron",
            mapbox_zoom=10, mapbox_center={"lat": 42.82503, "lon": 131.9687}  # {"lat": 23.537876, "lon": 78.292142}
        )

        html = '<html><body>'
        html += plotly.offline.plot(fig, output_type='div', include_plotlyjs='cdn')
        html += '</body></html>'
        self.plot_widget.setHtml(html)

    def button_delete_table_1(self):
        row = self.table.currentRow()
        if row > -1:  # Если есть выделенная строка/элемент
            self.table.removeRow(row)
            # Следующий вызов нужен для того, чтобы
            # сбросить индекс выбранной строки (чтобы currentRow установился в -1)
            self.table.selectionModel().clearCurrentIndex()

    def button_delete_table_2(self):
        row = self.table_parser.currentRow()
        if row > -1:  # Если есть выделенная строка/элемент
            self.table_parser.removeRow(row)
            # Следующий вызов нужен для того, чтобы
            # сбросить индекс выбранной строки (чтобы currentRow установился в -1)
            self.table_parser.selectionModel().clearCurrentIndex()

    def on_click(self):
        widget = QtWidgets.QDialog()
        ui = Ui_Dialog_parser_area(self)
        ui.setupUi(widget)
        widget.exec_()

    def on_click_filter(self):
        widget = QtWidgets.QDialog()
        ui = Ui_Dialog_filter(self)
        ui.setupUi(widget)
        widget.exec_()

    def on_click_export(self):
        widget = QtWidgets.QDialog()
        ui = Ui_Dialog_export()
        ui.setupUi(widget)
        widget.exec_()

    def on_click_animate(self):
        widget = QtWidgets.QDialog()
        ui = Ui_Dialog_vizualizator(self)
        ui.setupUi(widget)
        widget.exec_()

    def reload_all(self):
        #self.setMap()
        self.real_time("")
        self.remake_table("", 1)
        self.remake_table_parser()

    def setMap(self):
        gdf = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))
        # with open('states_india_1.json') as response:
        #    india = json.load(response)
        print(gdf.head())

        # with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
        #    counties = json.load(response)

        fig = go.Figure(go.Choroplethmapbox(locations=gdf['continent'],
                                            featureidkey="properties.st_nm",
                                            colorscale="Viridis",
                                            zmin=0,
                                            zmax=25,
                                            marker_opacity=0.5,
                                            marker_line_width=1
                                            ))


        result = Output_db.output_visualizer(" AND t2.name = 'HOLLY PIONEER'", 1)

        lati = []
        longi = []
        text_ship = []
        #for res in result:
        #    lati.append(str(res['latitude']))
        #    longi.append(str(res['longitude']))
        #    text_ship.append(str(res['name'] + ' ' + str(res['type'])))
        for i in range(1, len(result)):
            lati.append(str(result[i]['latitude']))
            longi.append(str(result[i]['longitude']))
            text_ship.append(str(result[i]['name'] + ' ' + str(result[i]['type'])))
        # print(lati)
        # print(longi)
        # print(text_ship)
        lati1 = []
        longi1 = []
        text_ship1 = []
        lati1.append(str(result[0]['latitude']))
        longi1.append(str(result[0]['longitude']))
        text_ship1.append(str(result[0]['name'] + ' ' + str(result[0]['type'])))

        #fig.add_trace(
        #    go.Scattermapbox(
        #        lat=lati1,
        #        lon=longi1,
        #        mode='markers',
        #        marker=go.scattermapbox.Marker(
        #            size=9
        #        ),
        #        text=text_ship1,
        #    )
        #)

        frames = []
        for i in range(0, len(lati)):
            frames.append(go.Frame(data=[
                go.Scattermapbox(
                    lat=[lati[i]],
                    lon=[longi[i]],
                    mode='markers',
                    marker=go.scattermapbox.Marker(
                        size=9
                    ),
                    text=[text_ship[i]],
                )
            ]))
        fig.frames = frames
        # fig.add_trace(
        #    go.Scattermapbox(
        #        lat=['38.91427', '38.91538', '38.91458',
        #             '38.92239', '38.93222', '38.90842',
        #             '38.91931', '38.93260', '38.91368',
        #             '38.88516', '38.921894', '38.93206',
        #             '38.91275'],
        #        lon=['-77.02827', '-77.02013', '-77.03155',
        #             '-77.04227', '-77.02854', '-77.02419',
        #             '-77.02518', '-77.03304', '-77.04509',
        #             '-76.99656', '-77.042438', '-77.02821',
        #             '-77.01239'],
        #        mode='markers',
        #        marker=go.scattermapbox.Marker(
        #            size=9
        #        ),
        #        text=["The coffee bar", "Bistro Bohem", "Black Cat",
        #              "Snap", "Columbia Heights Coffee", "Azi's Cafe",
        #              "Blind Dog Cafe", "Le Caprice", "Filter",
        #              "Peregrine", "Tryst", "The Coupe",
        #              "Big Bear Cafe"],
        #    )
        # )
        # fig.add_trace(
        #    go.Scattermapbox(
        #        lat=['48.5017'],
        #        lon=['-75.5673'],
        #        mode='markers',
        #        marker=dict(
        #            size=14
        #        ),
        #        text=['Montreal'],
        #        subplot='mapbox',
        #    )
        # )
        fig.update_layout(
            mapbox_style="carto-positron",
            mapbox_zoom=10, mapbox_center={"lat": 42.82503, "lon": 131.9687} #{"lat": 23.537876, "lon": 78.292142}
        )
        # fig.update_layout(
        #    autosize=True,
        #    hovermode='closest',
        #    mapbox=dict(
        #        style='carto-positron',
        #        domain={'x': [0, 0.4], 'y': [0, 1]},
        #        bearing=0,
        #        center=dict(
        #            lat=45,
        #            lon=-73
        #        ),
        #        pitch=0,
        #        zoom=5
        #    ),
        #    mapbox2=dict(
        #        style='open-street-map',
        #        domain={'x': [0.6, 1.0], 'y': [0, 1]},
        #        bearing=0,
        #        center=dict(
        #            lat=45,
        #            lon=-73
        #        ),
        #        pitch=0,
        #        zoom=5
        #    ),
        # )
        # fig.update_layout(mapbox_style="carto-positron",
        #                  mapbox_zoom=3.5, mapbox_center={"lat": 23.537876, "lon": 78.292142})
        # fig.update_layout(margin={"r": 0, "t": 0, "l": 0, "b": 0})
        # fig.add_trace(go.Scattermapbox(lon=[-101.29], lat=[42.11], marker_size=8))  # 47.1164° N, 101.2996° W
        # fig.add_trace(go.Scattermapbox(lon=[-150.49], lat=[64.80], subplot="mapbox2"))

        html = '<html><body>'
        html += plotly.offline.plot(fig, output_type='div', include_plotlyjs='cdn')
        html += '</body></html>'
        self.plot_widget.setHtml(html)

    def remake_table(self, where, number):

        if number == 1:
            result = Output_db.output_visualizer("" + where, number) #Возвращение всех параметров (INTERSECT SELECT id, flag, name, type FROM vessels )
            self.table.setColumnCount(12)  # Set columns
            self.table.setRowCount(len(result))  # and row

            # self.lay.SetFixedSize(1000, 1000)
            # self.lay.setFixedHeight(1000)
            self.table.setFixedWidth(1000)
            self.table.setFixedHeight(550)

            # Set the table headers
            self.table.setHorizontalHeaderLabels(
                ["ID", "Скорость", "Название", "Координаты", "Время", "Дата", "Страна", "Тип", "Курс", "deadweight", "heading", "destination"])

            # Set the tooltips to headings
            self.table.horizontalHeaderItem(0).setToolTip("Название судна")
            self.table.horizontalHeaderItem(1).setToolTip("Скорость судна")
            self.table.horizontalHeaderItem(2).setToolTip("Название судна")
            self.table.horizontalHeaderItem(3).setToolTip("Местоположение судна")
            self.table.horizontalHeaderItem(4).setToolTip("Время записи данных")
            self.table.horizontalHeaderItem(5).setToolTip("Дата записи данных")
            self.table.horizontalHeaderItem(6).setToolTip("Страна судна")
            self.table.horizontalHeaderItem(7).setToolTip("Тип судна")
            self.table.horizontalHeaderItem(8).setToolTip("Тип судна")
            self.table.horizontalHeaderItem(9).setToolTip("Тип судна")
            self.table.horizontalHeaderItem(10).setToolTip("Тип судна")
            self.table.horizontalHeaderItem(11).setToolTip("Тип судна")

            # Set the alignment to the headers
            self.table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(3).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(4).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(5).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(6).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(7).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(8).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(9).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(10).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(11).setTextAlignment(Qt.AlignHCenter)

            self.table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
            #self.table.horizontalHeader().setDefaultSectionSize(200)
            #self.table.horizontalHeaderItem(2).setDefaultSectionSize(200)
            #self.table.horizontalHeaderItem(3).setDefaultSectionSize(150)

            # Fill the first line
            for i in range(0, len(result)):
                time_date = str(result[i]['timedate']).split()
                self.table.setItem(i, 0, QtWidgets.QTableWidgetItem(str(result[i]['id']))) #name
                self.table.setItem(i, 1, QtWidgets.QTableWidgetItem(str(result[i]['speed']))) #скорость судна
                self.table.setItem(i, 2, QtWidgets.QTableWidgetItem(str(result[i]['name']))) #название судна
                self.table.setItem(i, 3, QtWidgets.QTableWidgetItem(str(result[i]['latitude']) + ":" + str(result[i]['longitude']))) #x:y
                self.table.setItem(i, 4, QtWidgets.QTableWidgetItem(time_date[1])) #время
                self.table.setItem(i, 5, QtWidgets.QTableWidgetItem(time_date[0])) #дата
                self.table.setItem(i, 6, QtWidgets.QTableWidgetItem(result[i]['flag'])) #страна судна
                self.table.setItem(i, 7, QtWidgets.QTableWidgetItem(result[i]['type'])) #тип судна
                self.table.setItem(i, 8, QtWidgets.QTableWidgetItem(str(result[i]['course'])))  # тип судна
                self.table.setItem(i, 9, QtWidgets.QTableWidgetItem(str(result[i]['deadweight'])))
                self.table.setItem(i, 10, QtWidgets.QTableWidgetItem(str(result[i]['heading'])))
                self.table.setItem(i, 11, QtWidgets.QTableWidgetItem(result[i]['destination']))
            self.table.setColumnWidth(1, 300)
            self.table.resizeColumnsToContents()

        elif number == 2:
            result = Output_db.output_visualizer("" + where, number) #Возвращение всех параметров (INTERSECT SELECT id, flag, name, type FROM vessels )
            self.table.setColumnCount(6)  # Set columns
            self.table.setRowCount(len(result))  # and row

            # self.lay.SetFixedSize(1000, 1000)
            # self.lay.setFixedHeight(1000)
            self.table.setFixedWidth(1000)
            self.table.setFixedHeight(550)

            # Set the table headers
            self.table.setHorizontalHeaderLabels(
                ["ID", "Название", "Флаг", "Длина", "Ширина", "Тип"])

            # Set the tooltips to headings
            self.table.horizontalHeaderItem(0).setToolTip("ID судна")
            self.table.horizontalHeaderItem(1).setToolTip("Название судна")
            self.table.horizontalHeaderItem(2).setToolTip("Флаг судна")
            self.table.horizontalHeaderItem(3).setToolTip("Длина судна")
            self.table.horizontalHeaderItem(4).setToolTip("Ширина судна")
            self.table.horizontalHeaderItem(5).setToolTip("Тип судна")

            # Set the alignment to the headers
            self.table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(3).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(4).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(5).setTextAlignment(Qt.AlignHCenter)

            self.table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

            # Fill the first line
            for i in range(0, len(result)):
                self.table.setItem(i, 0, QtWidgets.QTableWidgetItem(str(result[i]['id']))) #name
                self.table.setItem(i, 1, QtWidgets.QTableWidgetItem(str(result[i]['name']))) #скорость судна
                self.table.setItem(i, 2, QtWidgets.QTableWidgetItem(str(result[i]['flag']))) #акватория
                self.table.setItem(i, 3, QtWidgets.QTableWidgetItem(str(result[i]['length']))) #x:y
                self.table.setItem(i, 4, QtWidgets.QTableWidgetItem(str(result[i]['width']))) #время
                self.table.setItem(i, 5, QtWidgets.QTableWidgetItem(str(result[i]['type']))) #дата
            self.table.setColumnWidth(1, 300)
            self.table.resizeColumnsToContents()

        elif number == 3:
            result = Output_db.output_visualizer("" + where, 1) #Возвращение всех параметров (INTERSECT SELECT id, flag, name, type FROM vessels )
            self.table.setColumnCount(7)  # Set columns
            self.table.setRowCount(len(result))  # and row

            # self.lay.SetFixedSize(1000, 1000)
            # self.lay.setFixedHeight(1000)
            self.table.setFixedWidth(1000)
            self.table.setFixedHeight(550)

            # Set the table headers
            self.table.setHorizontalHeaderLabels(
                ["ID", "Акватория", "Координаты", "Скорость", "Курс", "Heading", "Тип"])

            # Set the tooltips to headings
            self.table.horizontalHeaderItem(0).setToolTip("ID судна")
            self.table.horizontalHeaderItem(1).setToolTip("Акватория судна")
            self.table.horizontalHeaderItem(2).setToolTip("Координаты судна")
            self.table.horizontalHeaderItem(3).setToolTip("Скорость судна")
            self.table.horizontalHeaderItem(4).setToolTip("Курс судна")
            self.table.horizontalHeaderItem(5).setToolTip("Heading")
            self.table.horizontalHeaderItem(6).setToolTip("Тип судна")

            # Set the alignment to the headers
            self.table.horizontalHeaderItem(0).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(2).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(3).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(4).setTextAlignment(Qt.AlignHCenter)
            self.table.horizontalHeaderItem(5).setTextAlignment(Qt.AlignHCenter)

            self.table.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

            # Fill the first line
            for i in range(0, len(result)):
                self.table.setItem(i, 0, QtWidgets.QTableWidgetItem(str(result[i]['id']))) #name
                self.table.setItem(i, 1, QtWidgets.QTableWidgetItem("Владивосток")) #акватория
                self.table.setItem(i, 2, QtWidgets.QTableWidgetItem(
                    str(result[i]['latitude']) + ":" + str(result[i]['longitude'])))  # x:y
                self.table.setItem(i, 3, QtWidgets.QTableWidgetItem(str(result[i]['speed']))) #скорость судна
                self.table.setItem(i, 4, QtWidgets.QTableWidgetItem(str(result[i]['course'])))  # тип судна
                self.table.setItem(i, 5, QtWidgets.QTableWidgetItem(str(result[i]['heading'])))
                self.table.setItem(i, 6, QtWidgets.QTableWidgetItem(result[i]['type'])) #тип судна
            self.table.setColumnWidth(1, 300)
            self.table.resizeColumnsToContents()


    def remake_table_parser(self):

        result = Output_db.output_visualizer("", 4) #Возвращение всех параметров (INTERSECT SELECT id, flag, name, type FROM vessels )
        self.table_parser.setColumnCount(5)  # Set columns
        self.table_parser.setRowCount(len(result))  # and row
        self.table_parser.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        # self.lay.SetFixedSize(1000, 1000)
        # self.lay.setFixedHeight(1000)
        self.table_parser.setFixedWidth(1000)
        self.table_parser.setFixedHeight(550)
        # Set the table headers
        self.table_parser.setHorizontalHeaderLabels(
            ["Область", "Левая широта", "Верхняя долгота", "Правая широта", "Нижняя долгота"])
        # Set the tooltips to headings
        self.table_parser.horizontalHeaderItem(0).setToolTip("Название области")
        self.table_parser.horizontalHeaderItem(1).setToolTip("Левая широта")
        self.table_parser.horizontalHeaderItem(2).setToolTip("Верхняя долгота")
        self.table_parser.horizontalHeaderItem(3).setToolTip("Правая широта")
        self.table_parser.horizontalHeaderItem(4).setToolTip("Нижняя долгота")



        # Set the alignment to the headers
        self.table_parser.horizontalHeaderItem(0).setTextAlignment(Qt.AlignHCenter)
        self.table_parser.horizontalHeaderItem(1).setTextAlignment(Qt.AlignHCenter)
        self.table_parser.horizontalHeaderItem(2).setTextAlignment(Qt.AlignHCenter)
        self.table_parser.horizontalHeaderItem(3).setTextAlignment(Qt.AlignHCenter)
        self.table_parser.horizontalHeaderItem(4).setTextAlignment(Qt.AlignHCenter)

        # Fill the first line
        for i in range(0, len(result)):
            self.table_parser.setItem(i, 0, QtWidgets.QTableWidgetItem(str(result[i]['area_name']))) #name
            self.table_parser.setItem(i, 1, QtWidgets.QTableWidgetItem(str(result[i]['latitude_l_u']))) #скорость судна
            self.table_parser.setItem(i, 2, QtWidgets.QTableWidgetItem(str(result[i]['longitude_l_u']))) #акватория
            self.table_parser.setItem(i, 3, QtWidgets.QTableWidgetItem(str(result[i]['latitude_r_d']))) #x:y
            self.table_parser.setItem(i, 4, QtWidgets.QTableWidgetItem(str(result[i]['longitude_r_d']))) #время
        self.table_parser.setColumnWidth(1, 300)
        self.table_parser.resizeColumnsToContents()

    def setupUi(self, MainWindow):

        #self.where = ""

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1192, 701)
        MainWindow.setMinimumSize(QtCore.QSize(1192, 701))
        MainWindow.setMaximumSize(QtCore.QSize(1192, 701))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1191, 661))
        self.tabWidget.setStyleSheet("QTabBar::tab{height:28}\n"
"")





        self.tabWidget.setIconSize(QtCore.QSize(16, 16))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tabWidget.addTab(self.tab_3, "")





        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")

        self.plot_widget = QWebEngineView(self.tab)

        #self.setMap()
        self.real_time("")
        self.plot_widget.setFixedWidth(1190)
        self.plot_widget.setFixedHeight(650)


        self.pushButton_7_delete_area = QtWidgets.QPushButton(self.tab_2) #Кнопка удаления данных из таблицы
        self.pushButton_7_delete_area.setGeometry(QtCore.QRect(800, 5, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_7_delete_area.setFont(font)
        self.pushButton_7_delete_area.setObjectName("pushButton_7")

        self.pushButton_7_delete_area.clicked.connect(self.button_delete_table_2)

        self.pushButton_4 = QtWidgets.QPushButton(self.tab_2) #Кнопка добавления области
        self.pushButton_4.setGeometry(QtCore.QRect(950, 5, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_4.clicked.connect(self.on_click)


        #-------------------table
        self.lay = QtWidgets.QHBoxLayout(self.tab_3)
        self.table = QtWidgets.QTableWidget()  # Create a table
        self.lay.addWidget(self.table)

        self.remake_table("", 1)


        #-------------------

        # -------------------table2
        self.lay_parser = QtWidgets.QHBoxLayout(self.tab_2)
        self.table_parser = QtWidgets.QTableWidget()  # Create a table
        self.lay_parser.addWidget(self.table_parser)

        self.remake_table_parser()

        # -------------------

        self.pushButton_5_delete_data = QtWidgets.QPushButton(self.tab_3) #Кнопка удаления данных из таблицы
        self.pushButton_5_delete_data.setGeometry(QtCore.QRect(950, 5, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_5_delete_data.setFont(font)
        self.pushButton_5_delete_data.setObjectName("pushButton_5")

        self.pushButton_5_delete_data.clicked.connect(self.button_delete_table_1)


        #self.pushButton_6_update_data = QtWidgets.QPushButton(self.tab_3) #Кнопка обновления данных из таблицы
        #self.pushButton_6_update_data.setGeometry(QtCore.QRect(950, 5, 131, 31))
        #font = QtGui.QFont()
        #font.setPointSize(9)
        #self.pushButton_6_update_data.setFont(font)
        #self.pushButton_6_update_data.setObjectName("pushButton_5")
#
        ##self.pushButton_6_update_data.clicked.connect(lambda: self.remake_table(self.table))
        #self.pushButton_6_update_data.clicked.connect(lambda: self.remake_table("", 1))

        #self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tab_2)
        #self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(20, 60, 1156, 261))
        #self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        #self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        #self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        #self.horizontalLayout_2.setSpacing(118)
        #self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        #spacerItem = QtWidgets.QSpacerItem(108, 108, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        #self.horizontalLayout_2.addItem(spacerItem)
        #self.checkBox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_2)
        #self.checkBox.setMinimumSize(QtCore.QSize(0, 0))
        #self.checkBox.setSizeIncrement(QtCore.QSize(0, 0))
        #self.checkBox.setBaseSize(QtCore.QSize(0, 0))
        #self.checkBox.setText("")
        #self.checkBox.setIconSize(QtCore.QSize(16, 16))
        #self.checkBox.setObjectName("checkBox")
        #self.horizontalLayout_2.addWidget(self.checkBox)
        #self.label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        #self.label.setText("")
        #self.label.setPixmap(QtGui.QPixmap("C:/Users/nikit/Desktop/pyDesigner/program_vessel_grabber/200px-Square_200x200.svg.png"))
        #self.label.setObjectName("label")
        #self.horizontalLayout_2.addWidget(self.label)
        #self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        #self.label_2.setObjectName("label_2")
        #self.horizontalLayout_2.addWidget(self.label_2)
        #self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        #self.label_3.setObjectName("label_3")
        #self.horizontalLayout_2.addWidget(self.label_3)
        #self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        #self.label_4.setObjectName("label_4")
        #self.horizontalLayout_2.addWidget(self.label_4)

        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(800, 0, 391, 31))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(20)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(288, 18, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)

        self.pushButton5 = QtWidgets.QPushButton(self.verticalLayoutWidget)  #Кнопка обновления всего
        self.pushButton5.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/nikit/Desktop/pyDesigner/program_vessel_grabber/117122.png"),
                       QtGui.QIcon.Normal, QtGui.QIcon.On)  # Фильтр
        self.pushButton5.setIcon(icon)
        self.pushButton5.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton5)
        self.pushButton5.clicked.connect(self.reload_all)

        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget) #Кнопка фильтра
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/nikit/Desktop/pyDesigner/program_vessel_grabber/107799.png"), QtGui.QIcon.Normal, QtGui.QIcon.On) #Фильтр
        self.pushButton.setIcon(icon)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton.clicked.connect(self.on_click_filter)

        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget) #Кнопка экспорта
        self.pushButton_2.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("C:/Users/nikit/Desktop/pyDesigner/program_vessel_grabber/69539.png"), QtGui.QIcon.Normal, QtGui.QIcon.On) #Экспорт
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton_2.clicked.connect(self.on_click_export)

        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget) #Кнопка визуализации
        self.pushButton_3.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("C:/Users/nikit/Desktop/pyDesigner/program_vessel_grabber/558593.png"), QtGui.QIcon.Normal, QtGui.QIcon.On) #Анимация
        self.pushButton_3.setIcon(icon2)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_3.clicked.connect(self.on_click_animate)

        self.label2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label2.setObjectName("label2")
        self.label2.setMinimumSize(QtCore.QSize(40, 0))
        self.horizontalLayout.addWidget(self.label2)

        spacerItem2 = QtWidgets.QSpacerItem(17, 21, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.horizontalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1192, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setStyleSheet(
            "QStatusBar{padding-left:8px;background:rgba(0,0,0,0);color:rgba(255,0,0,255);font-weight:bold;}")
        MainWindow.setStatusBar(self.statusbar)

        self.statusbar.showMessage("Данных для экспорта нет")
        #self.statusbar.showMessage("")
        print("")
        print("already added")

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.MainWindow = MainWindow

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Vessel grabber"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Карта"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Данные"))
        self.pushButton_4.setText(_translate("MainWindow", "Добавить область"))
        self.pushButton_7_delete_area.setText(_translate("MainWindow", "Удалить область"))
        self.pushButton_5_delete_data.setText(_translate("MainWindow", "Удалить"))
        #self.pushButton_6_update_data.setText(_translate("MainWindow", "Обновить"))
        #self.label_2.setText(_translate("MainWindow", "Название области"))
        #self.label_3.setText(_translate("MainWindow", "Координаты области"))
        #self.label_4.setText(_translate("MainWindow", "Количество судов в области"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Парсинг"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    #area = []
    #top = {
    #    "x": {
    #        "degree": 131,
    #        "minute": 24,
    #        "second": 54
    #    },
    #    "y": {
    #        "degree": 43,
    #        "minute": 7,
    #        "second": 23
    #    }
    #}
    #area.append(top)
    #bot = {
    #    "x": {
    #        "degree": 131,
    #        "minute": 57,
    #        "second": 30
    #    },
    #    "y": {
    #        "degree": 43,
    #        "minute": 2,
    #        "second": 57
    #    }
    #}
    #area.append(bot)
#
    #DataGrabber.start_scan(area)

    sys.exit(app.exec_())
